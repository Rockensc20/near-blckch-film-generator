{"version":3,"file":"film-generator-near.js","sources":["../node_modules/near-sdk-js/lib/utils.js","../node_modules/near-sdk-js/lib/types/public_key.js","../node_modules/near-sdk-js/lib/types/vm_types.js","../node_modules/near-sdk-js/lib/api.js","../node_modules/near-sdk-js/lib/collections/vector.js","../node_modules/near-sdk-js/lib/near-bindgen.js","../src/model.ts","../node_modules/rand-seed/dist/rand-seed.es.js","../src/contract.ts"],"sourcesContent":["// make PromiseIndex a nominal typing\nvar PromiseIndexBrand;\n(function (PromiseIndexBrand) {\n    PromiseIndexBrand[PromiseIndexBrand[\"_\"] = -1] = \"_\";\n})(PromiseIndexBrand || (PromiseIndexBrand = {}));\nconst TYPE_KEY = \"typeInfo\";\nvar TypeBrand;\n(function (TypeBrand) {\n    TypeBrand[\"BIGINT\"] = \"bigint\";\n    TypeBrand[\"DATE\"] = \"date\";\n})(TypeBrand || (TypeBrand = {}));\nexport const ERR_INCONSISTENT_STATE = \"The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?\";\nexport const ERR_INDEX_OUT_OF_BOUNDS = \"Index out of bounds\";\nconst ACCOUNT_ID_REGEX = /^(([a-z\\d]+[-_])*[a-z\\d]+\\.)*([a-z\\d]+[-_])*[a-z\\d]+$/;\n/**\n * Concat two Uint8Array\n * @param array1\n * @param array2\n * @returns the concatenation of two array\n */\nexport function concat(array1, array2) {\n    const mergedArray = new Uint8Array(array1.length + array2.length);\n    mergedArray.set(array1);\n    mergedArray.set(array2, array1.length);\n    return mergedArray;\n}\n/**\n * Asserts that the expression passed to the function is truthy, otherwise throws a new Error with the provided message.\n *\n * @param expression - The expression to be asserted.\n * @param message - The error message to be printed.\n */\nexport function assert(expression, message) {\n    if (!expression) {\n        throw new Error(\"assertion failed: \" + message);\n    }\n}\nexport function getValueWithOptions(value, options = {\n    deserializer: deserialize,\n}) {\n    if (value === null) {\n        return options?.defaultValue ?? null;\n    }\n    const deserialized = deserialize(value);\n    if (deserialized === undefined || deserialized === null) {\n        return options?.defaultValue ?? null;\n    }\n    if (options?.reconstructor) {\n        return options.reconstructor(deserialized);\n    }\n    return deserialized;\n}\nexport function serializeValueWithOptions(value, { serializer } = {\n    serializer: serialize,\n}) {\n    return serializer(value);\n}\nexport function serialize(valueToSerialize) {\n    return encode(JSON.stringify(valueToSerialize, function (key, value) {\n        if (typeof value === \"bigint\") {\n            return {\n                value: value.toString(),\n                [TYPE_KEY]: TypeBrand.BIGINT,\n            };\n        }\n        if (typeof this[key] === \"object\" &&\n            this[key] !== null &&\n            this[key] instanceof Date) {\n            return {\n                value: this[key].toISOString(),\n                [TYPE_KEY]: TypeBrand.DATE,\n            };\n        }\n        return value;\n    }));\n}\nexport function deserialize(valueToDeserialize) {\n    return JSON.parse(decode(valueToDeserialize), (_, value) => {\n        if (value !== null &&\n            typeof value === \"object\" &&\n            Object.keys(value).length === 2 &&\n            Object.keys(value).every((key) => [\"value\", TYPE_KEY].includes(key))) {\n            switch (value[TYPE_KEY]) {\n                case TypeBrand.BIGINT:\n                    return BigInt(value[\"value\"]);\n                case TypeBrand.DATE:\n                    return new Date(value[\"value\"]);\n            }\n        }\n        return value;\n    });\n}\n/**\n * Validates the Account ID according to the NEAR protocol\n * [Account ID rules](https://nomicon.io/DataStructures/Account#account-id-rules).\n *\n * @param accountId - The Account ID string you want to validate.\n */\nexport function validateAccountId(accountId) {\n    return (accountId.length >= 2 &&\n        accountId.length <= 64 &&\n        ACCOUNT_ID_REGEX.test(accountId));\n}\n/**\n * A subset of NodeJS TextEncoder API\n */\nexport class TextEncoder {\n    encode(s) {\n        return env.utf8_string_to_uint8array(s);\n    }\n}\n/**\n * A subset of NodeJS TextDecoder API. Only support utf-8 and latin1 encoding.\n */\nexport class TextDecoder {\n    constructor(encoding = \"utf-8\") {\n        this.encoding = encoding;\n    }\n    decode(a) {\n        if (this.encoding == \"utf-8\") {\n            return env.uint8array_to_utf8_string(a);\n        }\n        else if (this.encoding == \"latin1\") {\n            return env.uint8array_to_latin1_string(a);\n        }\n        else {\n            throw new Error(\"unsupported encoding: \" + this.encoding);\n        }\n    }\n}\n/**\n * Convert a string to Uint8Array, each character must have a char code between 0-255.\n * @param s - string that with only Latin1 character to convert\n * @returns result Uint8Array\n */\nexport function bytes(s) {\n    return env.latin1_string_to_uint8array(s);\n}\n/**\n * Convert a Uint8Array to string, each uint8 to the single character of that char code\n * @param a - Uint8Array to convert\n * @returns result string\n */\nexport function str(a) {\n    return env.uint8array_to_latin1_string(a);\n}\n/**\n * Encode the string to Uint8Array with UTF-8 encoding\n * @param s - String to encode\n * @returns result Uint8Array\n */\nexport function encode(s) {\n    return env.utf8_string_to_uint8array(s);\n}\n/**\n * Decode the Uint8Array to string in UTF-8 encoding\n * @param a - array to decode\n * @returns result string\n */\nexport function decode(a) {\n    return env.uint8array_to_utf8_string(a);\n}\n","import { base58 } from \"@scure/base\";\nimport { concat } from \"../utils\";\nexport var CurveType;\n(function (CurveType) {\n    CurveType[CurveType[\"ED25519\"] = 0] = \"ED25519\";\n    CurveType[CurveType[\"SECP256K1\"] = 1] = \"SECP256K1\";\n})(CurveType || (CurveType = {}));\nvar DataLength;\n(function (DataLength) {\n    DataLength[DataLength[\"ED25519\"] = 32] = \"ED25519\";\n    DataLength[DataLength[\"SECP256K1\"] = 64] = \"SECP256K1\";\n})(DataLength || (DataLength = {}));\nfunction getCurveType(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return curveType;\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction dataLength(curveType) {\n    switch (curveType) {\n        case CurveType.ED25519:\n        case CurveType.SECP256K1:\n            return {\n                [CurveType.ED25519]: DataLength.ED25519,\n                [CurveType.SECP256K1]: DataLength.SECP256K1,\n            }[curveType];\n        default:\n            throw new UnknownCurve();\n    }\n}\nfunction splitKeyTypeData(value) {\n    const idx = value.indexOf(\":\");\n    if (idx >= 0) {\n        return [\n            curveTypeFromStr(value.substring(0, idx)),\n            value.substring(idx + 1),\n        ];\n    }\n    else {\n        return [CurveType.ED25519, value];\n    }\n}\nexport function curveTypeFromStr(value) {\n    switch (value) {\n        case \"ed25519\":\n            return CurveType.ED25519;\n        case \"secp256k1\":\n            return CurveType.SECP256K1;\n        default:\n            throw new UnknownCurve();\n    }\n}\nexport class ParsePublicKeyError extends Error {\n}\nexport class InvalidLengthError extends ParsePublicKeyError {\n    constructor(length, expectedLength) {\n        super(`Invalid length: ${length}. Expected: ${expectedLength}`);\n        this.length = length;\n        this.expectedLength = expectedLength;\n    }\n}\nexport class Base58Error extends ParsePublicKeyError {\n    constructor(error) {\n        super(`Base58 error: ${error}`);\n        this.error = error;\n    }\n}\nexport class UnknownCurve extends ParsePublicKeyError {\n    constructor() {\n        super(\"Unknown curve\");\n    }\n}\n/**\n * A abstraction on top of the NEAR public key string.\n */\nexport class PublicKey {\n    /**\n     * @param data - The string you want to create a PublicKey from.\n     */\n    constructor(data) {\n        const curveLenght = dataLength(data[0]);\n        if (data.length !== curveLenght + 1) {\n            throw new InvalidLengthError(data.length, curveLenght + 1);\n        }\n        this.type = getCurveType(data[0]);\n        this.data = data;\n    }\n    /**\n     * The curve type of the public key.\n     */\n    curveType() {\n        return this.type;\n    }\n    /**\n     * Create a public key from a public key string.\n     *\n     * @param publicKeyString - The public key string you want to create a PublicKey from.\n     */\n    static fromString(publicKeyString) {\n        const [curve, keyData] = splitKeyTypeData(publicKeyString);\n        let data;\n        try {\n            data = base58.decode(keyData);\n        }\n        catch (error) {\n            throw new Base58Error(error.message);\n        }\n        return new PublicKey(concat(new Uint8Array([curve]), data));\n    }\n}\n","/**\n * A Promise result in near can be one of:\n * - NotReady = 0 - the promise you are specifying is still not ready, not yet failed nor successful.\n * - Successful = 1 - the promise has been successfully executed and you can retrieve the resulting value.\n * - Failed = 2 - the promise execution has failed.\n */\nexport var PromiseResult;\n(function (PromiseResult) {\n    PromiseResult[PromiseResult[\"NotReady\"] = 0] = \"NotReady\";\n    PromiseResult[PromiseResult[\"Successful\"] = 1] = \"Successful\";\n    PromiseResult[PromiseResult[\"Failed\"] = 2] = \"Failed\";\n})(PromiseResult || (PromiseResult = {}));\n/**\n * A promise error can either be due to the promise failing or not yet being ready.\n */\nexport var PromiseError;\n(function (PromiseError) {\n    PromiseError[PromiseError[\"Failed\"] = 0] = \"Failed\";\n    PromiseError[PromiseError[\"NotReady\"] = 1] = \"NotReady\";\n})(PromiseError || (PromiseError = {}));\n","import { assert, str, encode, decode, } from \"./utils\";\nimport { PromiseResult } from \"./types\";\nconst U64_MAX = 2n ** 64n - 1n;\nconst EVICTED_REGISTER = U64_MAX - 1n;\n/**\n * Logs parameters in the NEAR WASM virtual machine.\n *\n * @param params - Parameters to log.\n */\nexport function log(...params) {\n    env.log(params.reduce((accumulated, parameter, index) => {\n        // Stringify undefined\n        const param = parameter === undefined ? \"undefined\" : parameter;\n        // Convert Objects to strings and convert to string\n        const stringified = typeof param === \"object\" ? JSON.stringify(param) : `${param}`;\n        if (index === 0) {\n            return stringified;\n        }\n        return `${accumulated} ${stringified}`;\n    }, \"\"));\n}\n/**\n * Returns the account ID of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountId() {\n    env.signer_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the public key of the account that signed the transaction.\n * Can only be called in a call or initialize function.\n */\nexport function signerAccountPk() {\n    env.signer_account_pk(0);\n    return env.read_register(0);\n}\n/**\n * Returns the account ID of the account that called the function.\n * Can only be called in a call or initialize function.\n */\nexport function predecessorAccountId() {\n    env.predecessor_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the account ID of the current contract - the contract that is being executed.\n */\nexport function currentAccountId() {\n    env.current_account_id(0);\n    return str(env.read_register(0));\n}\n/**\n * Returns the current block index.\n */\nexport function blockIndex() {\n    return env.block_index();\n}\n/**\n * Returns the current block height.\n */\nexport function blockHeight() {\n    return blockIndex();\n}\n/**\n * Returns the current block timestamp.\n */\nexport function blockTimestamp() {\n    return env.block_timestamp();\n}\n/**\n * Returns the current epoch height.\n */\nexport function epochHeight() {\n    return env.epoch_height();\n}\n/**\n * Returns the amount of NEAR attached to this function call.\n * Can only be called in payable functions.\n */\nexport function attachedDeposit() {\n    return env.attached_deposit();\n}\n/**\n * Returns the amount of Gas that was attached to this function call.\n */\nexport function prepaidGas() {\n    return env.prepaid_gas();\n}\n/**\n * Returns the amount of Gas that has been used by this function call until now.\n */\nexport function usedGas() {\n    return env.used_gas();\n}\n/**\n * Returns the current account's account balance.\n */\nexport function accountBalance() {\n    return env.account_balance();\n}\n/**\n * Returns the current account's locked balance.\n */\nexport function accountLockedBalance() {\n    return env.account_locked_balance();\n}\n/**\n * Reads the value from NEAR storage that is stored under the provided key.\n *\n * @param key - The key to read from storage.\n */\nexport function storageReadRaw(key) {\n    const returnValue = env.storage_read(key, 0);\n    if (returnValue !== 1n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n/**\n * Reads the utf-8 string value from NEAR storage that is stored under the provided key.\n *\n * @param key - The utf-8 string key to read from storage.\n */\nexport function storageRead(key) {\n    const ret = storageReadRaw(encode(key));\n    if (ret !== null) {\n        return decode(ret);\n    }\n    return null;\n}\n/**\n * Checks for the existance of a value under the provided key in NEAR storage.\n *\n * @param key - The key to check for in storage.\n */\nexport function storageHasKeyRaw(key) {\n    return env.storage_has_key(key) === 1n;\n}\n/**\n * Checks for the existance of a value under the provided utf-8 string key in NEAR storage.\n *\n * @param key - The utf-8 string key to check for in storage.\n */\nexport function storageHasKey(key) {\n    return storageHasKeyRaw(encode(key));\n}\n/**\n * Get the last written or removed value from NEAR storage.\n */\nexport function storageGetEvictedRaw() {\n    return env.read_register(EVICTED_REGISTER);\n}\n/**\n * Get the last written or removed value from NEAR storage as utf-8 string.\n */\nexport function storageGetEvicted() {\n    return decode(storageGetEvictedRaw());\n}\n/**\n * Returns the current accounts NEAR storage usage.\n */\nexport function storageUsage() {\n    return env.storage_usage();\n}\n/**\n * Writes the provided bytes to NEAR storage under the provided key.\n *\n * @param key - The key under which to store the value.\n * @param value - The value to store.\n */\nexport function storageWriteRaw(key, value) {\n    return env.storage_write(key, value, EVICTED_REGISTER) === 1n;\n}\n/**\n * Writes the provided utf-8 string to NEAR storage under the provided key.\n *\n * @param key - The utf-8 string key under which to store the value.\n * @param value - The utf-8 string value to store.\n */\nexport function storageWrite(key, value) {\n    return storageWriteRaw(encode(key), encode(value));\n}\n/**\n * Removes the value of the provided key from NEAR storage.\n *\n * @param key - The key to be removed.\n */\nexport function storageRemoveRaw(key) {\n    return env.storage_remove(key, EVICTED_REGISTER) === 1n;\n}\n/**\n * Removes the value of the provided utf-8 string key from NEAR storage.\n *\n * @param key - The utf-8 string key to be removed.\n */\nexport function storageRemove(key) {\n    return storageRemoveRaw(encode(key));\n}\n/**\n * Returns the cost of storing 0 Byte on NEAR storage.\n */\nexport function storageByteCost() {\n    return 10000000000000000000n;\n}\n/**\n * Returns the arguments passed to the current smart contract call.\n */\nexport function inputRaw() {\n    env.input(0);\n    return env.read_register(0);\n}\n/**\n * Returns the arguments passed to the current smart contract call as utf-8 string.\n */\nexport function input() {\n    return decode(inputRaw());\n}\n/**\n * Returns the value from the NEAR WASM virtual machine.\n *\n * @param value - The value to return.\n */\nexport function valueReturnRaw(value) {\n    env.value_return(value);\n}\n/**\n * Returns the utf-8 string value from the NEAR WASM virtual machine.\n *\n * @param value - The utf-8 string value to return.\n */\nexport function valueReturn(value) {\n    valueReturnRaw(encode(value));\n}\n/**\n * Returns a random string of bytes.\n */\nexport function randomSeed() {\n    env.random_seed(0);\n    return env.read_register(0);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreateRaw(accountId, methodName, args, amount, gas) {\n    return env.promise_create(accountId, methodName, args, amount, gas);\n}\n/**\n * Create a NEAR promise call to a contract on the blockchain.\n *\n * @param accountId - The account ID of the target contract.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR attached to the call.\n * @param gas - The amount of Gas attached to the call.\n */\nexport function promiseCreate(accountId, methodName, args, amount, gas) {\n    return promiseCreateRaw(accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThenRaw(promiseIndex, accountId, methodName, args, amount, gas) {\n    return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);\n}\n/**\n * Attach a callback NEAR promise to be executed after a provided promise.\n *\n * @param promiseIndex - The promise after which to call the callback.\n * @param accountId - The account ID of the contract to perform the callback on.\n * @param methodName - The name of the method to call.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {\n    return promiseThenRaw(promiseIndex, accountId, methodName, encode(args), amount, gas);\n}\n/**\n * Join an arbitrary array of NEAR promises.\n *\n * @param promiseIndexes - An arbitrary array of NEAR promise indexes to join.\n */\nexport function promiseAnd(...promiseIndexes) {\n    return env.promise_and(...promiseIndexes);\n}\n/**\n * Create a NEAR promise which will have multiple promise actions inside.\n *\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchCreate(accountId) {\n    return env.promise_batch_create(accountId);\n}\n/**\n * Attach a callback NEAR promise to a batch of NEAR promise actions.\n *\n * @param promiseIndex - The NEAR promise index of the batch.\n * @param accountId - The account ID of the target contract.\n */\nexport function promiseBatchThen(promiseIndex, accountId) {\n    return env.promise_batch_then(promiseIndex, accountId);\n}\n/**\n * Attach a create account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a create account action to.\n */\nexport function promiseBatchActionCreateAccount(promiseIndex) {\n    env.promise_batch_action_create_account(promiseIndex);\n}\n/**\n * Attach a deploy contract promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a deploy contract action to.\n * @param code - The WASM byte code of the contract to be deployed.\n */\nexport function promiseBatchActionDeployContract(promiseIndex, code) {\n    env.promise_batch_action_deploy_contract(promiseIndex, code);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCallRaw(promiseIndex, methodName, args, amount, gas) {\n    env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);\n}\n/**\n * Attach a function call promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n */\nexport function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {\n    promiseBatchActionFunctionCallRaw(promiseIndex, methodName, encode(args), amount, gas);\n}\n/**\n * Attach a transfer promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a transfer action to.\n * @param amount - The amount of NEAR to transfer.\n */\nexport function promiseBatchActionTransfer(promiseIndex, amount) {\n    env.promise_batch_action_transfer(promiseIndex, amount);\n}\n/**\n * Attach a stake promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a stake action to.\n * @param amount - The amount of NEAR to stake.\n * @param publicKey - The public key with which to stake.\n */\nexport function promiseBatchActionStake(promiseIndex, amount, publicKey) {\n    env.promise_batch_action_stake(promiseIndex, amount, publicKey);\n}\n/**\n * Attach a add full access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add full access key action to.\n * @param publicKey - The public key to add as a full access key.\n * @param nonce - The nonce to use.\n */\nexport function promiseBatchActionAddKeyWithFullAccess(promiseIndex, publicKey, nonce) {\n    env.promise_batch_action_add_key_with_full_access(promiseIndex, publicKey, nonce);\n}\n/**\n * Attach a add access key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a add access key action to.\n * @param publicKey - The public key to add.\n * @param nonce - The nonce to use.\n * @param allowance - The allowance of the access key.\n * @param receiverId - The account ID of the receiver.\n * @param methodNames - The names of the method to allow the key for.\n */\nexport function promiseBatchActionAddKeyWithFunctionCall(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames) {\n    env.promise_batch_action_add_key_with_function_call(promiseIndex, publicKey, nonce, allowance, receiverId, methodNames);\n}\n/**\n * Attach a delete key promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete key action to.\n * @param publicKey - The public key to delete.\n */\nexport function promiseBatchActionDeleteKey(promiseIndex, publicKey) {\n    env.promise_batch_action_delete_key(promiseIndex, publicKey);\n}\n/**\n * Attach a delete account promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a delete account action to.\n * @param beneficiaryId - The account ID of the beneficiary - the account that receives the remaining amount of NEAR.\n */\nexport function promiseBatchActionDeleteAccount(promiseIndex, beneficiaryId) {\n    env.promise_batch_action_delete_account(promiseIndex, beneficiaryId);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, args, amount, gas, weight) {\n    env.promise_batch_action_function_call_weight(promiseIndex, methodName, args, amount, gas, weight);\n}\n/**\n * Attach a function call with weight promise action to the NEAR promise index with the provided promise index.\n *\n * @param promiseIndex - The index of the promise to attach a function call with weight action to.\n * @param methodName - The name of the method to be called.\n * @param args - The utf-8 string arguments to call the method with.\n * @param amount - The amount of NEAR to attach to the call.\n * @param gas - The amount of Gas to attach to the call.\n * @param weight - The weight of unused Gas to use.\n */\nexport function promiseBatchActionFunctionCallWeight(promiseIndex, methodName, args, amount, gas, weight) {\n    promiseBatchActionFunctionCallWeightRaw(promiseIndex, methodName, encode(args), amount, gas, weight);\n}\n/**\n * The number of promise results available.\n */\nexport function promiseResultsCount() {\n    return env.promise_results_count();\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index.\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResultRaw(promiseIndex) {\n    const status = env.promise_result(promiseIndex, 0);\n    assert(Number(status) === PromiseResult.Successful, `Promise result ${status == PromiseResult.Failed\n        ? \"Failed\"\n        : status == PromiseResult.NotReady\n            ? \"NotReady\"\n            : status}`);\n    return env.read_register(0);\n}\n/**\n * Returns the result of the NEAR promise for the passed promise index as utf-8 string\n *\n * @param promiseIndex - The index of the promise to return the result for.\n */\nexport function promiseResult(promiseIndex) {\n    return decode(promiseResultRaw(promiseIndex));\n}\n/**\n * Executes the promise in the NEAR WASM virtual machine.\n *\n * @param promiseIndex - The index of the promise to execute.\n */\nexport function promiseReturn(promiseIndex) {\n    env.promise_return(promiseIndex);\n}\n/**\n * Returns sha256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function sha256(value) {\n    env.sha256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak256 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak256(value) {\n    env.keccak256(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns keccak512 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function keccak512(value) {\n    env.keccak512(value, 0);\n    return env.read_register(0);\n}\n/**\n * Returns ripemd160 hash of given value\n * @param value - value to be hashed, in Bytes\n * @returns hash result in Bytes\n */\nexport function ripemd160(value) {\n    env.ripemd160(value, 0);\n    return env.read_register(0);\n}\n/**\n * Recovers an ECDSA signer address from a 32-byte message hash and a corresponding\n * signature along with v recovery byte. Takes in an additional flag to check for\n * malleability of the signature which is generally only ideal for transactions.\n *\n * @param hash - 32-byte message hash\n * @param sig - signature\n * @param v - number of recovery byte\n * @param malleabilityFlag - whether to check malleability\n * @returns 64 bytes representing the public key if the recovery was successful.\n */\nexport function ecrecover(hash, sig, v, malleabilityFlag) {\n    const returnValue = env.ecrecover(hash, sig, v, malleabilityFlag, 0);\n    if (returnValue === 0n) {\n        return null;\n    }\n    return env.read_register(0);\n}\n// NOTE: \"env.panic(msg)\" is not exported, use \"throw Error(msg)\" instead\n/**\n * Panic the transaction execution with given message\n * @param msg - panic message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function panicUtf8(msg) {\n    env.panic_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-8 sequence\n */\nexport function logUtf8(msg) {\n    env.log_utf8(msg);\n}\n/**\n * Log the message in transaction logs\n * @param msg - message in raw bytes, which should be a valid UTF-16 sequence\n */\nexport function logUtf16(msg) {\n    env.log_utf16(msg);\n}\n/**\n * Returns the number of staked NEAR of given validator, in yoctoNEAR\n * @param accountId - validator's AccountID\n * @returns - staked amount\n */\nexport function validatorStake(accountId) {\n    return env.validator_stake(accountId);\n}\n/**\n * Returns the number of staked NEAR of all validators, in yoctoNEAR\n * @returns total staked amount\n */\nexport function validatorTotalStake() {\n    return env.validator_total_stake();\n}\n/**\n * Computes multiexp on alt_bn128 curve using Pippenger's algorithm \\sum_i\n * mul_i g_{1 i} should be equal result.\n *\n * @param value - equence of (g1:G1, fr:Fr), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * `value` is encoded as packed, little-endian\n * `[((u256, u256), u256)]` slice.\n *\n * @returns multi exp sum\n */\nexport function altBn128G1Multiexp(value) {\n    env.alt_bn128_g1_multiexp(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes sum for signed g1 group elements on alt_bn128 curve \\sum_i\n * (-1)^{sign_i} g_{1 i} should be equal result.\n *\n * @param value - sequence of (sign:bool, g1:G1), where\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq.\n * value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns sum over Fq.\n */\nexport function altBn128G1Sum(value) {\n    env.alt_bn128_g1_sum(value, 0);\n    return env.read_register(0);\n}\n/**\n * Computes pairing check on alt_bn128 curve.\n * \\sum_i e(g_{1 i}, g_{2 i}) should be equal one (in additive notation), e(g1, g2) is Ate pairing\n *\n * @param value - sequence of (g1:G1, g2:G2), where\n * G2 is Fr-ordered subgroup point (x:Fq2, y:Fq2) on alt_bn128 twist,\n * alt_bn128 twist is Y^2 = X^3 + 3/(i+9) curve over Fq2\n * Fq2 is complex field element (re: Fq, im: Fq)\n * G1 is point (x:Fq, y:Fq) on alt_bn128,\n * alt_bn128 is Y^2 = X^3 + 3 curve over Fq\n * `value` is encoded a as packed, little-endian\n * `[((u256, u256), ((u256, u256), (u256, u256)))]` slice.\n *\n * @returns whether pairing check pass\n */\nexport function altBn128PairingCheck(value) {\n    return env.alt_bn128_pairing_check(value) === 1n;\n}\n","import * as near from \"../api\";\nimport { assert, getValueWithOptions, serializeValueWithOptions, ERR_INCONSISTENT_STATE, ERR_INDEX_OUT_OF_BOUNDS, str, bytes, } from \"../utils\";\nfunction indexToKey(prefix, index) {\n    const data = new Uint32Array([index]);\n    const array = new Uint8Array(data.buffer);\n    const key = str(array);\n    return prefix + key;\n}\n/**\n * An iterable implementation of vector that stores its content on the trie.\n * Uses the following map: index -> element\n */\nexport class Vector {\n    /**\n     * @param prefix - The byte prefix to use when storing elements inside this collection.\n     * @param length - The initial length of the collection. By default 0.\n     */\n    constructor(prefix, length = 0) {\n        this.prefix = prefix;\n        this.length = length;\n    }\n    /**\n     * Checks whether the collection is empty.\n     */\n    isEmpty() {\n        return this.length === 0;\n    }\n    /**\n     * Get the data stored at the provided index.\n     *\n     * @param index - The index at which to look for the data.\n     * @param options - Options for retrieving the data.\n     */\n    get(index, options) {\n        if (index >= this.length) {\n            return options?.defaultValue ?? null;\n        }\n        const storageKey = indexToKey(this.prefix, index);\n        const value = near.storageReadRaw(bytes(storageKey));\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Removes an element from the vector and returns it in serialized form.\n     * The removed element is replaced by the last element of the vector.\n     * Does not preserve ordering, but is `O(1)`.\n     *\n     * @param index - The index at which to remove the element.\n     * @param options - Options for retrieving and storing the data.\n     */\n    swapRemove(index, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        if (index + 1 === this.length) {\n            return this.pop(options);\n        }\n        const key = indexToKey(this.prefix, index);\n        const last = this.pop(options);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(last, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Adds data to the collection.\n     *\n     * @param element - The data to store.\n     * @param options - Options for storing the data.\n     */\n    push(element, options) {\n        const key = indexToKey(this.prefix, this.length);\n        this.length += 1;\n        near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options));\n    }\n    /**\n     * Removes and retrieves the element with the highest index.\n     *\n     * @param options - Options for retrieving the data.\n     */\n    pop(options) {\n        if (this.isEmpty()) {\n            return options?.defaultValue ?? null;\n        }\n        const lastIndex = this.length - 1;\n        const lastKey = indexToKey(this.prefix, lastIndex);\n        this.length -= 1;\n        assert(near.storageRemoveRaw(bytes(lastKey)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Replaces the data stored at the provided index with the provided data and returns the previously stored data.\n     *\n     * @param index - The index at which to replace the data.\n     * @param element - The data to replace with.\n     * @param options - Options for retrieving and storing the data.\n     */\n    replace(index, element, options) {\n        assert(index < this.length, ERR_INDEX_OUT_OF_BOUNDS);\n        const key = indexToKey(this.prefix, index);\n        assert(near.storageWriteRaw(bytes(key), serializeValueWithOptions(element, options)), ERR_INCONSISTENT_STATE);\n        const value = near.storageGetEvictedRaw();\n        return getValueWithOptions(value, options);\n    }\n    /**\n     * Extends the current collection with the passed in array of elements.\n     *\n     * @param elements - The elements to extend the collection with.\n     */\n    extend(elements) {\n        for (const element of elements) {\n            this.push(element);\n        }\n    }\n    [Symbol.iterator]() {\n        return new VectorIterator(this);\n    }\n    /**\n     * Create a iterator on top of the default collection iterator using custom options.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    createIteratorWithOptions(options) {\n        return {\n            [Symbol.iterator]: () => new VectorIterator(this, options),\n        };\n    }\n    /**\n     * Return a JavaScript array of the data stored within the collection.\n     *\n     * @param options - Options for retrieving and storing the data.\n     */\n    toArray(options) {\n        const array = [];\n        const iterator = options ? this.createIteratorWithOptions(options) : this;\n        for (const value of iterator) {\n            array.push(value);\n        }\n        return array;\n    }\n    /**\n     * Remove all of the elements stored within the collection.\n     */\n    clear() {\n        for (let index = 0; index < this.length; index++) {\n            const key = indexToKey(this.prefix, index);\n            near.storageRemoveRaw(bytes(key));\n        }\n        this.length = 0;\n    }\n    /**\n     * Serialize the collection.\n     *\n     * @param options - Options for storing the data.\n     */\n    serialize(options) {\n        return serializeValueWithOptions(this, options);\n    }\n    /**\n     * Converts the deserialized data from storage to a JavaScript instance of the collection.\n     *\n     * @param data - The deserialized data to create an instance from.\n     */\n    static reconstruct(data) {\n        const vector = new Vector(data.prefix, data.length);\n        return vector;\n    }\n}\n/**\n * An iterator for the Vector collection.\n */\nexport class VectorIterator {\n    /**\n     * @param vector - The vector collection to create an iterator for.\n     * @param options - Options for retrieving and storing data.\n     */\n    constructor(vector, options) {\n        this.vector = vector;\n        this.options = options;\n        this.current = 0;\n    }\n    next() {\n        if (this.current >= this.vector.length) {\n            return { value: null, done: true };\n        }\n        const value = this.vector.get(this.current, this.options);\n        this.current += 1;\n        return { value, done: false };\n    }\n}\n","import * as near from \"./api\";\nimport { deserialize, serialize, bytes, encode } from \"./utils\";\n/**\n * Tells the SDK to use this function as the initialization function of the contract.\n *\n * @param _empty - An empty object.\n */\nexport function initialize(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\n/**\n * Tells the SDK to expose this function as a view function.\n *\n * @param _empty - An empty object.\n */\nexport function view(_empty) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, _descriptor\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    ) { };\n}\nexport function call({ privateFunction = false, payableFunction = false, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            if (privateFunction &&\n                near.predecessorAccountId() !== near.currentAccountId()) {\n                throw new Error(\"Function is private\");\n            }\n            if (!payableFunction && near.attachedDeposit() > 0n) {\n                throw new Error(\"Function is not payable\");\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\n/**\n * Tells the SDK to apply an array of passed in middleware to the function execution.\n *\n * @param middlewares - The middlewares to be executed.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function middleware(...middlewares) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return function (_target, _key, descriptor) {\n        const originalMethod = descriptor.value;\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        descriptor.value = function (...args) {\n            try {\n                middlewares.forEach((middleware) => middleware(...args));\n            }\n            catch (error) {\n                throw new Error(error);\n            }\n            return originalMethod.apply(this, args);\n        };\n    };\n}\nexport function NearBindgen({ requireInit = false, serializer = serialize, deserializer = deserialize, }) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (target) => {\n        return class extends target {\n            static _create() {\n                return new target();\n            }\n            static _getState() {\n                const rawState = near.storageReadRaw(bytes(\"STATE\"));\n                return rawState ? this._deserialize(rawState) : null;\n            }\n            static _saveToStorage(objectToSave) {\n                near.storageWriteRaw(bytes(\"STATE\"), this._serialize(objectToSave));\n            }\n            static _getArgs() {\n                return JSON.parse(near.input() || \"{}\");\n            }\n            static _serialize(value, forReturn = false) {\n                if (forReturn) {\n                    return encode(JSON.stringify(value, (_, value) => typeof value === \"bigint\" ? `${value}` : value));\n                }\n                return serializer(value);\n            }\n            static _deserialize(value) {\n                return deserializer(value);\n            }\n            static _reconstruct(classObject, plainObject) {\n                for (const item in classObject) {\n                    const reconstructor = classObject[item].constructor?.reconstruct;\n                    classObject[item] = reconstructor\n                        ? reconstructor(plainObject[item])\n                        : plainObject[item];\n                }\n                return classObject;\n            }\n            static _requireInit() {\n                return requireInit;\n            }\n        };\n    };\n}\n","// 0.5 NEAR in YoctoNEAR as smart contracts always calculate in YoctoNEAR\r\nexport const POINT_FIVE = '500000000000000000000000';\r\n\r\nexport class GeneratedFilmCombination {\r\n    size: string;\r\n    format: string;\r\n    iso: string;\r\n  \r\n    /**\r\n    * Generates a new film combination based on specified parameters.\r\n    * @returns {GeneratedFilmCombination} A new film combination.\r\n    */\r\n    constructor(size: string, format: string, iso: string) {\r\n      this.size = size;\r\n      this.format = format;\r\n      this.iso = iso;\r\n    }\r\n  \r\n};\r\n\r\nexport class SavedFilmCombination {\r\n    analogSupporter: boolean;\r\n    photographer: string;\r\n    size: string;\r\n    format: string;\r\n    iso: string;\r\n    camera: string;\r\n    date: Date;\r\n    \r\n    /**\r\n    * Model for saving a new film combination including the camera, date, photographer and whether they donated to the contract's dev\r\n    * @returns {SavedFilmCombination} A film combination after it is saved.\r\n    */\r\n\r\n    constructor({analogSupporter,photographer, size, format, iso, camera, date }: SavedFilmCombination) {\r\n      \r\n      this.analogSupporter = analogSupporter\r\n      this.photographer = photographer;\r\n      this.size = size;\r\n      this.format = format;\r\n      this.iso = iso;\r\n      this.camera = camera;\r\n      this.date = date;\r\n    }\r\n    \r\n  }\r\n  ","var t=function(r,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])},t(r,n)};function r(r,n){if(\"function\"!=typeof n&&null!==n)throw new TypeError(\"Class extends value \"+String(n)+\" is not a constructor or null\");function i(){this.constructor=r}t(r,n),r.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}var n,i=function(){function t(){}return t._xfnv1a=function(t){for(var r=2166136261,n=0;n<t.length;n++)r=Math.imul(r^t.charCodeAt(n),16777619);return function(){return r+=r<<13,r^=r>>>7,r+=r<<3,r^=r>>>17,(r+=r<<5)>>>0}},t}(),s=function(t){function n(r){var i=t.call(this)||this;return i.a=n._xfnv1a(r)(),i}return r(n,t),n.prototype.next=function(){var t=this.a+=1831565813;return t=Math.imul(t^t>>>15,1|t),(((t^=t+Math.imul(t^t>>>7,61|t))^t>>>14)>>>0)/4294967296},n}(i),o=function(t){function n(r){var i=t.call(this)||this,s=n._xfnv1a(r);return i.a=s(),i.b=s(),i.c=s(),i.d=s(),i}return r(n,t),n.prototype.next=function(){this.a>>>=0,this.b>>>=0,this.c>>>=0,this.d>>>=0;var t=this.a+this.b|0;return this.a=this.b^this.b>>>9,this.b=this.c+(this.c<<3)|0,this.c=this.c<<21|this.c>>>11,this.d=this.d+1|0,t=t+this.d|0,this.c=this.c+t|0,(t>>>0)/4294967296},n}(i),e=function(t){function n(r){var i=t.call(this)||this,s=n._xfnv1a(r);return i.a=s(),i.b=s(),i.c=s(),i.d=s(),i}return r(n,t),n.prototype.next=function(){var t=this.b<<9,r=5*this.a;return r=r<<7|9*(r>>>25),this.c^=this.a,this.d^=this.b,this.b^=this.c,this.a^=this.d,this.c^=t,this.d=this.d<<11|this.d>>>21,(r>>>0)/4294967296},n}(i);!function(t){t.sfc32=\"sfc32\",t.mulberry32=\"mulberry32\",t.xoshiro128ss=\"xoshiro128ss\"}(n||(n={}));var u=function(){function t(t,r){void 0===r&&(r=n.sfc32),this.str=t,this.prng=r,this.generator=this._initializeGenerator()}return t.prototype.next=function(){return this.generator.next()},t.prototype._initializeGenerator=function(){if(function(t){return null===t}(t=this.str)||function(t){return void 0===t}(t))return this.wrap();var t;switch(this.prng){case\"sfc32\":return new o(this.str);case\"mulberry32\":return new s(this.str);case\"xoshiro128ss\":return new e(this.str);default:return this.wrap()}},t.prototype.wrap=function(){return{next:function(){return Math.random()}}},t}();export{n as PRNG,u as default};\n","// documentation at https://docs.near.org\nimport { NearBindgen, near, call, view, Vector } from 'near-sdk-js';\nimport { GeneratedFilmCombination,SavedFilmCombination, POINT_FIVE } from './model'\nimport Rand, { PRNG } from 'rand-seed'; \n\n// helper function to take care of random generation and value definition\nfunction generateNewFilmCombination(): GeneratedFilmCombination {\n  \n  // define possible values for film size, format, and ISO\n  const sizes = [\"135\", \"120\"];\n  const formats = [\"Color\", \"BnW\"];\n  const isoValues = [\"25\", \"32\", \"50\", \"100\", \"125\", \"160\", \"200\", \"400\", \"800\", \"1600\", \"3200\"];\n  \n  // use NEAR random seed for seeding the random number generator,\n  // which will then be used to pick random values from the arrays above\n  const rand = new Rand(near.randomSeed().toString())\n  \n  // randomly select values for size, format, and ISO\n  const randomSize = sizes[Math.floor(rand.next() * sizes.length)];\n  //near.log(randomSize);\n  const randomFormat = formats[Math.floor(rand.next() * formats.length)];\n  //near.log(randomFormat);\n  const randomIso = isoValues[Math.floor(rand.next() * isoValues.length)];\n  //near.log(randomIso);\n  \n  const generatedFilmCombination = new GeneratedFilmCombination(randomSize,randomFormat,randomIso);\n  return generatedFilmCombination;\n}\n\n// ### The Film Combination Generator###\n\n// Annotation for declaring a NEAR contract\n@NearBindgen({})\nclass FilmGeneratorNear {\n  film_combinations: Vector<SavedFilmCombination> =  new Vector<SavedFilmCombination>(\"v-uid\");\n  \n  // view functions are read-only, no transaction fees\n  @view({})\n  // Returns the last 10 saved film combinations, any older than that and they have to be viewed on the Blockchain explorer\n  get_film_combinations({ from_index = 0, limit = 10 }: { from_index: number, limit: number }): SavedFilmCombination[] {\n    const sorted_film_combinations = this.film_combinations.toArray().sort((a, b) => b.date.getTime() - a.date.getTime());\n    return sorted_film_combinations.slice(from_index, from_index + limit);\n  }\n\n  // call functions require tokens for the transfer/storage cost\n  @call({ payableFunction: true })\n  // Public - Saves a generated film combination to the blockchain\n  save_film_combination({ size, format, iso, camera, date }: { size: string,format: string,iso: string,camera: string, date: string }) {\n    // If the user attaches more than 0.1N the message is premium\n    const analogSupporter = near.attachedDeposit() >= BigInt(POINT_FIVE);\n    const photographer = near.predecessorAccountId();\n    const dateConverted = new Date(date);\n\n    const SavedFilmCombination: SavedFilmCombination = { analogSupporter, photographer,size, format, iso, camera,date: dateConverted };\n    this.film_combinations.push(SavedFilmCombination);\n  }\n\n  @view({})\n  // Returns a freshly generated, random film combination\n  get_film_combination(): GeneratedFilmCombination { \n    return generateNewFilmCombination();\n  }\n\n  // essentially a regular transaction to donate attached deposit to a photographer (ex. from the list in the fronted)\n  @call({ payableFunction: true })\n  donate_to_photographer({photographerToDonateTo}: { photographerToDonateTo: string}) {\n      // Get who is calling the method and how much $NEAR they attached\n      let donor = near.predecessorAccountId();\n      let donationAmount: bigint = near.attachedDeposit() as bigint;\n  \n      let toTransfer = donationAmount;\n  \n      near.log(`Thank you ${donor} for donating ${donationAmount} to ${photographerToDonateTo}! You have supported their analog journey with digital currency`);\n  \n      // Send the money to the beneficiary\n      const promise = near.promiseBatchCreate(photographerToDonateTo)\n      near.promiseBatchActionTransfer(promise, toTransfer)\n  }\n}"],"names":["PromiseIndexBrand","TYPE_KEY","TypeBrand","ERR_INCONSISTENT_STATE","ERR_INDEX_OUT_OF_BOUNDS","assert","expression","message","Error","getValueWithOptions","value","options","deserializer","deserialize","defaultValue","deserialized","undefined","reconstructor","serializeValueWithOptions","serializer","serialize","valueToSerialize","encode","JSON","stringify","key","toString","BIGINT","Date","toISOString","DATE","valueToDeserialize","parse","decode","_","Object","keys","length","every","includes","BigInt","bytes","s","env","latin1_string_to_uint8array","str","a","uint8array_to_latin1_string","utf8_string_to_uint8array","uint8array_to_utf8_string","CurveType","DataLength","PromiseResult","PromiseError","U64_MAX","EVICTED_REGISTER","log","params","reduce","accumulated","parameter","index","param","stringified","predecessorAccountId","predecessor_account_id","read_register","currentAccountId","current_account_id","attachedDeposit","attached_deposit","storageReadRaw","returnValue","storage_read","storageGetEvictedRaw","storageWriteRaw","storage_write","storageRemoveRaw","storage_remove","inputRaw","input","randomSeed","random_seed","promiseBatchCreate","accountId","promise_batch_create","promiseBatchActionTransfer","promiseIndex","amount","promise_batch_action_transfer","indexToKey","prefix","data","Uint32Array","array","Uint8Array","buffer","Vector","constructor","isEmpty","get","storageKey","near","swapRemove","pop","last","push","element","lastIndex","lastKey","replace","extend","elements","Symbol","iterator","VectorIterator","createIteratorWithOptions","toArray","clear","reconstruct","vector","current","next","done","view","_empty","_target","_key","_descriptor","call","privateFunction","payableFunction","descriptor","originalMethod","args","apply","NearBindgen","requireInit","target","_create","_getState","rawState","_deserialize","_saveToStorage","objectToSave","_serialize","_getArgs","forReturn","_reconstruct","classObject","plainObject","item","_requireInit","POINT_FIVE","GeneratedFilmCombination","size","format","iso","t","r","n","setPrototypeOf","__proto__","Array","prototype","hasOwnProperty","TypeError","String","i","create","_xfnv1a","Math","imul","charCodeAt","o","b","c","d","e","sfc32","mulberry32","xoshiro128ss","u","prng","generator","_initializeGenerator","wrap","random","generateNewFilmCombination","sizes","formats","isoValues","rand","Rand","randomSize","floor","randomFormat","randomIso","generatedFilmCombination","FilmGeneratorNear","_dec","_dec2","_dec3","_dec4","_dec5","_class","_class2","film_combinations","get_film_combinations","from_index","limit","sorted_film_combinations","sort","date","getTime","slice","save_film_combination","camera","analogSupporter","photographer","dateConverted","SavedFilmCombination","get_film_combination","donate_to_photographer","photographerToDonateTo","donor","donationAmount","toTransfer","promise","_applyDecoratedDescriptor","getOwnPropertyDescriptor","_state","_contract","_args","_result","name","onReturn","value_return"],"mappings":"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"}